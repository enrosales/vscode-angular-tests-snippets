{
  "Generate Angular Component Test": {
    "prefix": "testComponent",
    "body": [
      "import { ComponentFixture, TestBed }m '@angular/core/testing';",
      "",
      "describe('${1:Component}', () => {",
      "  let component: ${1:Component};",
      "  let fixture: ComponentFixture<${1:Component}>;",
      "",
      "  beforeEach(async () => {",
      "    await TestBed.configureTestingModule({",
      "      declarations: [${1:Component}]",
      "    }).compileComponents();",
      "",
      "    fixture = TestBed.createComponent(${1:Component});",
      "    component = fixture.componentInstance;",
      "    fixture.detectChanges();",
      "  });",
      "",
      "  it('should create', () => {",
      "    expect(component).toBeTruthy();",
      "  });",
      "});"
    ],
    "description": "Generate an Angular component test case"
  },
  "Generate Angular Service Test": {
    "prefix": "testService",
    "body": [
      "import { TestBed } from '@angular/core/testing';",
      "import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';",
      "",
      "import { ${1:TestService} } from './${1|test.service|}';",
      "",
      "describe('${1:TestService}', () => {",
      "  let service: ${1:TestService};",
      "  let httpMock: HttpTestingController;",
      "",
      "  beforeEach(() => {",
      "    TestBed.configureTestingModule({",
      "      imports: [HttpClientTestingModule],",
      "      providers: [${1:TestService}]",
      "    });",
      "    service = TestBed.inject(${1:TestService});",
      "    httpMock = TestBed.inject(HttpTestingController);",
      "  });",
      "",
      "  afterEach(() => {",
      "    httpMock.verify();",
      "  });",
      "",
      "  it('should be created', () => {",
      "    expect(service).toBeTruthy();",
      "  });",
      "});"
    ],
    "description": "Generate an Angular service test case"
  },
  "Generate Angular Pipe Test": {
    "prefix": "testPipe",
    "body": [
      "import { ${1:PipeName} } from './${1|pipe-name.pipe|}';",
      "",
      "describe('${1:PipeName}', () => {",
      "  let pipe: ${1:PipeName};",
      "",
      "  beforeEach(() => {",
      "    pipe = new ${1:PipeName}();",
      "  });",
      "",
      "  it('create an instance', () => {",
      "    expect(pipe).toBeTruthy();",
      "  });",
      "});"
    ],
    "description": "Generate an Angular pipe test case"
  },
  "Generate Angular Directive Test": {
    "prefix": "testDirective",
    "body": [
      "import { Component } from '@angular/core';",
      "import { ${1:DirectiveName} } from './${1|directive-name.directive|}';",
      "import { ComponentFixture, TestBed } from '@angular/core/testing';",
      "import { By } from '@angular/platform-browser';",
      "",
      "@Component({",
      "  standalone: true,",
      "  template: `<p ${2:DirectiveSelector}>Test</p>`,",
      "  imports: [${1:DirectiveName}]",
      "})",
      "class HostComponent {}",
      "",
      "describe('${1:DirectiveName}', () => {",
      "  let fixture: ComponentFixture<HostComponent>;",
      "",
      "  beforeEach(async () => {",
      "    await TestBed.configureTestingModule({",
      "      imports: [HostComponent]",
      "    }).compileComponents();",
      "",
      "    fixture = TestBed.createComponent(HostComponent);",
      "    fixture.detectChanges();",
      "  });",
      "",
      "  it('should create an instance', () => {",
      "    const directive = fixture.debugElement.query(By.directive(${1:DirectiveName}));",
      "    expect(directive).toBeTruthy();",
      "  });",
      "});"
    ],
    "description": "Generate an Angular directive test case"
  },
  "Generate Angular Guard Test": {
    "prefix": "testGuard",
    "body": [
      "import { TestBed } from '@angular/core/testing';",
      "import { RouterTestingModule } from '@angular/router/testing';",
      "",
      "import { ${1:GuardName} } from './${1|guard-name.guard|}';",
      "",
      "describe('${1:GuardName}', () => {",
      "  let guard: ${1:GuardName};",
      "",
      "  beforeEach(() => {",
      "    TestBed.configureTestingModule({",
      "      imports: [RouterTestingModule],",
      "      providers: [${1:GuardName}]",
      "    });",
      "    guard = TestBed.inject(${1:GuardName});",
      "  });",
      "",
      "  it('should be created', () => {",
      "    expect(guard).toBeTruthy();",
      "  });",
      "});"
    ],
    "description": "Generate an Angular guard test case"
  },
  "Generate Angular Resolver Test": {
    "prefix": "testResolver",
    "body": [
      "import { TestBed } from '@angular/core/testing';",
      "import { RouterTestingModule } from '@angular/router/testing';",
      "",
      "import { ${1:ResolverName} } from './${1|resolver-name.resolver|}';",
      "",
      "describe('${1:ResolverName}', () => {",
      "  let resolver: ${1:ResolverName};",
      "",
      "  beforeEach(() => {",
      "    TestBed.configureTestingModule({",
      "      imports: [RouterTestingModule],",
      "      providers: [${1:ResolverName}]",
      "    });",
      "    resolver = TestBed.inject(${1:ResolverName});",
      "  });",
      "",
      "  it('should be created', () => {",
      "    expect(resolver).toBeTruthy();",
      "  });",
      "});"
    ],
    "description": "Generate an Angular resolver test case"
  },
  "Generate Angular Module Test": {
    "prefix": "testModule",
    "body": [
      "import { TestBed } from '@angular/core/testing';",
      "",
      "import { ${1:ModuleName} } from './${1|module-name.module|}';",
      "",
      "describe('${1:ModuleName}', () => {",
      "  beforeEach(() => {",
      "    TestBed.configureTestingModule({",
      "      imports: [${1:ModuleName}]",
      "    }).compileComponents();",
      "  });",
      "",
      "  it('should create', () => {",
      "    expect(${1:ModuleName}).toBeTruthy();",
      "  });",
      "});"
    ],
    "description": "Generate an Angular module test case"
  },
  "Generate Angular Interface Test": {
    "prefix": "testInterface",
    "body": [
      "describe('${1:InterfaceName}', () => {",
      "  it('should create an instance', () => {",
      "    const instance: ${1:InterfaceName} = {} as ${1:InterfaceName};",
      "    expect(instance).toBeTruthy();",
      "  });",
      "});"
    ],
    "description": "Generate an Angular interface test case"
  },
  "Generate Angular Enum Test": {
    "prefix": "testEnum",
    "body": [
      "describe('${1:EnumName}', () => {",
      "  it('should create an instance', () => {",
      "    const instance: ${1:EnumName} = {} as ${1:EnumName};",
      "    expect(instance).toBeTruthy();",
      "  });",
      "});"
    ],
    "description": "Generate an Angular enum test case"
  },
 "Generate Angular Component Test with Mock Service": {
  "prefix": "testComponentMockService",
  "body": [
    "import { ComponentFixture, TestBed } from '@angular/core/testing';",
    "import { ${1:MyService} } from './${1|my.service|}';",
    "import { of } from 'rxjs';",
    "",
    "describe('${2:MyComponent}', () => {",
    "  let component: ${2:MyComponent};",
    "  let fixture: ComponentFixture<${2:MyComponent}>;",
    "  let ${3:mockService}: any;",
    "",
    "  beforeEach(async () => {",
    "    ${3:mockService} = {",
    "      ${4:getData}: () => of(${5:[]}) // Example: mock method that returns an observable",
    "    };",
    "",
    "    await TestBed.configureTestingModule({",
    "      declarations: [${2:MyComponent}],",
    "      providers: [",
    "        { provide: ${1:MyService}, useValue: ${3:mockService} }",
    "      ]",
    "    }).compileComponents();",
    "  });",
    "",
    "  beforeEach(() => {",
    "    fixture = TestBed.createComponent(${2:MyComponent});",
    "    component = fixture.componentInstance;",
    "    fixture.detectChanges();",
    "  });",
    "",
    "  it('should create', () => {",
    "    expect(component).toBeTruthy();",
    "  });",
    "",
    "  it('should call ${4:getData} on init', () => {",
    "    spyOn(${3:mockService}, '${4:getData}').and.returnValue(of(${5:[]}));",
    "    component.ngOnInit();",
    "    expect(${3:mockService}.${4:getData}).toHaveBeenCalled();",
    "  });",
    "});"
  ],
  "description": "Generate an Angular component test case with a mocked service"
  },
  "Generate Angular Service Test with Mock HTTP": {
    "prefix": "testServiceMockHttp",
    "body": [
      "import { TestBed } from '@angular/core/testing';",
      "import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';",
      "",
      "import { ${1:MyService} } from './${1|my.service|}';",
      "",
      "describe('${1:MyService}', () => {",
      "  let service: ${1:MyService};",
      "  let httpMock: HttpTestingController;",
      "",
      "  beforeEach(() => {",
      "    TestBed.configureTestingModule({",
      "      imports: [HttpClientTestingModule],",
      "      providers: [${1:MyService}]",
      "    });",
      "    service = TestBed.inject(${1:MyService});",
      "    httpMock = TestBed.inject(HttpTestingController);",
      "  });",
      "",
      "  afterEach(() => {",
      "    httpMock.verify();",
      "  });",
      "",
      "  it('should be created', () => {",
      "    expect(service).toBeTruthy();",
      "  });",
      "",
      "  it('should call getData and return mock data', () => {",
      "    const mockData = [{ id: 1, name: 'Test' }];",
      "",
      "    service.getData().subscribe(data => {",
      "      expect(data).toEqual(mockData);",
      "    });",
      "",
      "    const req = httpMock.expectOne('${2:/api/data}'); // Example API endpoint",
      "    expect(req.request.method).toBe('GET');",
      "    req.flush(mockData); // Mock response data",
      "  });",
      "",
      "});"
    ],
    "description": "Generate an Angular service test case with a mocked HTTP request"
  },
  "Generate Angular Component Test with Mock Router": {
    "prefix": "testComponentMockRouter",
    "body": [
      "import { ComponentFixture, TestBed } from '@angular/core/testing';",
      "import { Router } from '@angular/router';",
      "",
      "describe('${1:MyComponent}', () => {",
      "  let component: ${1:MyComponent};",
      "  let fixture: ComponentFixture<${1:MyComponent}>;",
      "  let router: Router;",
      "",
      "  beforeEach(async () => {",
      "    await TestBed.configureTestingModule({",
      "      declarations: [${1:MyComponent}],",
      "      providers: [{ provide: Router, useValue: jasmine.createSpyObj('Router', ['navigate']) }]",
      "    }).compileComponents();",
      "  });",
      "",
      "  beforeEach(() => {",
      "    fixture = TestBed.createComponent(${1:MyComponent});",
      "    component = fixture.componentInstance;",
      "    router = TestBed.inject(Router);",
      "    fixture.detectChanges();",
      "  });",
      "",
      "  it('should create', () => {",
      "    expect(component).toBeTruthy();",
      "  });",
      "",
      "  it('should navigate on button click', () => {",
      "    component.onButtonClick(); // Example method that triggers navigation",
      "    expect(router.navigate).toHaveBeenCalledWith(['${2:/path/to/navigate}']); // Example route path",
      "  });",
      "});"
    ],
    "description": "Generate an Angular component test case with a mocked router"
  },
  "Generate Angular Reactive Form Test": {
  "prefix": "testReactiveForm",
  "body": [
    "import { ComponentFixture, TestBed } from '@angular/core/testing';",
    "import { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';",
    "",
    "describe('${1:FormComponent}', () => {",
    "  let component: ${1:FormComponent};",
    "  let fixture: ComponentFixture<${1:FormComponent}>;",
    "  let formBuilder: FormBuilder;",
    "",
    "  beforeEach(async () => {",
    "    await TestBed.configureTestingModule({",
    "      declarations: [${1:FormComponent}],",
    "      imports: [ReactiveFormsModule],",
    "      providers: [FormBuilder]",
    "    }).compileComponents();",
    "  });",
    "",
    "  beforeEach(() => {",
    "    fixture = TestBed.createComponent(${1:FormComponent});",
    "    component = fixture.componentInstance;",
    "    formBuilder = TestBed.inject(FormBuilder);",
    "    // Initialize form here if needed, or in ngOnInit of component",
    "    // component.${2:myForm} = formBuilder.group({",
    "    //   ${3:name}: ['', Validators.required]",
    "    // });",
    "    fixture.detectChanges();",
    "  });",
    "",
    "  it('should create the form component', () => {",
    "    expect(component).toBeTruthy();",
    "  });",
    "",
    "  it('form should be invalid when empty', () => {",
    "    component.${2:myForm}.controls['${3:name}'].setValue('');",
    "    expect(component.${2:myForm}.valid).toBeFalsy();",
    "  });",
    "",
    "  it('form should be valid when all fields are filled', () => {",
    "    component.${2:myForm}.controls['${3:name}'].setValue('Test Name');",
    "    expect(component.${2:myForm}.valid).toBeTruthy();",
    "  });",
    "});"
  ],
  "description": "Generate an Angular reactive form test case"
  },
  "Generate Angular Template-Driven Form Test": {
    "prefix": "testTemplateDrivenForm",
    "body": [
      "import { ComponentFixture, TestBed } from '@angular/core/testing';",
      "import { FormsModule } from '@angular/forms';",
      "",
      "describe('${1:FormComponent}', () => {",
      "  let component: ${1:FormComponent};",
      "  let fixture: ComponentFixture<${1:FormComponent}>;",
      "",
      "  beforeEach(async () => {",
      "    await TestBed.configureTestingModule({",
      "      declarations: [${1:FormComponent}],",
      "      imports: [FormsModule]",
      "    }).compileComponents();",
      "  });",
      "",
      "  beforeEach(() => {",
      "    fixture = TestBed.createComponent(${1:FormComponent});",
      "    component = fixture.componentInstance;",
      "    fixture.detectChanges();",
      "  });",
      "",
      "  it('should create the form component', () => {",
      "    expect(component).toBeTruthy();",
      "  });",
      "",
      "  it('form should be invalid when empty', () => {",
      "    component.${2:myForm} = { ${3:name}: '' }; // Example form model",
      "    expect(component.${2:myForm}.valid).toBeFalsy();",
      "  });",
      "",
      "  it('form should be valid when all fields are filled', () => {",
      "    component.${2:myForm} = { ${3:name}: 'Test Name' }; // Example form model with valid data",
      "    expect(component.${2:myForm}.valid).toBeTruthy();",
      "  });",
      "});"
    ],
    "description": "Generate an Angular template-driven form test case"
  },
  "Generate Angular Component Test with Router": {
  "prefix": "testComponentRouter",
  "body": [
    "import { ComponentFixture, TestBed } from '@angular/core/testing';",
    "import { RouterTestingModule } from '@angular/router/testing';",
    "import { ActivatedRoute, Router } from '@angular/router';",
    "import { of } from 'rxjs';",
    "",
    "describe('${1:MyComponent}', () => {",
    "  let component: ${1:MyComponent};",
    "  let fixture: ComponentFixture<${1:MyComponent}>;",
    "  let router: Router;",
    "  let activatedRoute: ActivatedRoute;",
    "",
    "  beforeEach(async () => {",
    "    await TestBed.configureTestingModule({",
    "      declarations: [${1:MyComponent}],",
    "      imports: [RouterTestingModule.withRoutes([])], // Add routes if needed for specific tests",
    "      providers: [",
    "        { provide: ActivatedRoute, useValue: { snapshot: { paramMap: { get: (key: string) => '${2:paramValue}' } }, data: of({ ${3:dataKey}: ${4:dataValue} }) } }",
    "      ]",
    "    }).compileComponents();",
    "  });",
    "",
    "  beforeEach(() => {",
    "    fixture = TestBed.createComponent(${1:MyComponent});",
    "    component = fixture.componentInstance;",
    "    router = TestBed.inject(Router);",
    "    activatedRoute = TestBed.inject(ActivatedRoute);",
    "    fixture.detectChanges();",
    "  });",
    "",
    "  it('should create', () => {",
    "    expect(component).toBeTruthy();",
    "  });",
    "",
    "  it('should navigate to ${5:/path} on ${6:buttonClick}', () => {",
    "    const navigateSpy = spyOn(router, 'navigate');",
    "    // Simulate user action or call a method that triggers navigation",
    "    // component.${6:buttonClick}();",
    "    // expect(navigateSpy).toHaveBeenCalledWith(['${5:/path}']);",
    "  });",
    "});"
  ],
  "description": "Generate an Angular component test case with Router"
  },
  "Generate Angular Structural Directive Test": {
  "prefix": "testStructuralDirective",
  "body": [
    "import { Component, DebugElement } from '@angular/core';",
    "import { ComponentFixture, TestBed } from '@angular/core/testing';",
    "import { By } from '@angular/platform-browser';",
    "import { ${1:MyStructuralDirective} } from './${1|my-structural.directive|}';",
    "",
    "@Component({",
    "  template: `<div *<span class=\"math-inline\">{1:MyStructuralDirective}='</span>{2:condition}'>Test Content</div>`",
    "})",
    "class HostComponent {",
    "  ${2:condition}: boolean = true;",
    "}",
    "",
    "describe('${1:MyStructuralDirective}', () => {",
    "  let fixture: ComponentFixture<HostComponent>;",
    "  let hostComponent: HostComponent;",
    "  let debugElement: DebugElement;",
    "",
    "  beforeEach(async () => {",
    "    await TestBed.configureTestingModule({",
    "      declarations: [HostComponent, ${1:MyStructuralDirective}]",
    "    }).compileComponents();",
    "  });",
    "",
    "  beforeEach(() => {",
    "    fixture = TestBed.createComponent(HostComponent);",
    "    hostComponent = fixture.componentInstance;",
    "    debugElement = fixture.debugElement.query(By.directive(${1:MyStructuralDirective}));",
    "    fixture.detectChanges();",
    "  });",
    "",
    "  it('should create', () => {",
    "    expect(debugElement).toBeTruthy();",
    "  });",
    "",
    "  it('should show content when condition is true', () => {",
    "    hostComponent.${2:condition} = true;",
    "    fixture.detectChanges();",
    "    expect(fixture.nativeElement.textContent).toContain('Test Content');",
    "  });",
    "",
    "  it('should hide content when condition is false', () => {",
    "    hostComponent.${2:condition} = false;",
    "    fixture.detectChanges();",
    "    expect(fixture.nativeElement.textContent).not.toContain('Test Content');",
    "  });",
    "});"
  ],
  "description": "Generate an Angular structural directive test case"
  },
  "Generate Angular Attribute Directive Test": {
    "prefix": "testAttributeDirective",
    "body": [
      "import { Component, DebugElement } from '@angular/core';",
      "import { ComponentFixture, TestBed } from '@angular/core/testing';",
      "import { By } from '@angular/platform-browser';",
      "import { ${1:MyAttributeDirective} } from './${1|my-attribute.directive|}';",
      "",
      "@Component({",
      "  template: `<div ${1:myAttributeDirective}='${2:value}'>Test Content</div>`",
      "})",
      "class HostComponent {}",
      "",
      "describe('${1:MyAttributeDirective}', () => {",
      "  let fixture: ComponentFixture<HostComponent>;",
      "  let debugElement: DebugElement;",
      "",
      "  beforeEach(async () => {",
      "    await TestBed.configureTestingModule({",
      "      declarations: [HostComponent, ${1:MyAttributeDirective}]",
      "    }).compileComponents();",
      "  });",
      "",
      "  beforeEach(() => {",
      "    fixture = TestBed.createComponent(HostComponent);",
      "    debugElement = fixture.debugElement.query(By.directive(${1:MyAttributeDirective}));",
      "    fixture.detectChanges();",
      "  });",
      "",
      "  it('should create', () => {",
      "    expect(debugElement).toBeTruthy();",
      "  });",
      "",
      // Add more tests as needed
    ],
    "description": "Generate an Angular attribute directive test case"
  }
}